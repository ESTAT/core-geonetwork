<?xml version="1.0" encoding="UTF-8"?>
<!-- Basic support for ECAS authentication -->
<!-- To enable this, uncomment the line for config-security-ecas.xml in config-security.xml -->
<!-- Then, configure your URLs on ecas-config.properties: cas.baseURL=https://webgate.ec.europa.eu/cas -->
<!-- Make sure web.xml is correctly configured using the Tomcat login realm -->
<!-- Finally, on config-security-core.xml, replace the authenticator with 
	the ECAS one: <property name="providers"> <list> <ref bean="casAuthenticationProvider" 
	/> </list> -->

<beans>
	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		be performed -->
	<bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg ref="logoutSuccessHandler" />
		<constructor-arg>
			<array>
				<bean class="jeeves.config.springutil.LogoutUserSessionHandler" />
				<bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</array>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_spring_security_logout" />
	</bean>
	<bean id="logoutSuccessHandler"
		class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<property name="defaultTargetUrl" value="${cas.logout.url}"></property>
	</bean>

	<!-- J2EE pre-authentication -->
	<bean id="ecasPreAuthenticationFilter"
		class="org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="continueFilterChainOnUnsuccessfulAuthentication"
			value="false" />
	</bean>
	
	<bean id="casAuthenticationProvider"
		class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<property name="preAuthenticatedUserDetailsService">
			<bean id="userDetailsServiceWrapper"
				class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<property name="userDetailsService" ref="userDetailsService" />
			</bean>
		</property>
	</bean>

	<bean id="userDetailsService" class="org.fao.geonet.kernel.security.ecas.ECasUserDetailsBuilderService">
	</bean>

</beans>